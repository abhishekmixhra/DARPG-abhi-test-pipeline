<!-- grivence_details.ejs -->

<!-- CSS for spinner -->
<style>
     #loader {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      width: 12%;
      transform: translate(-50%, -50%);
      z-index: 999999;
    }

    .spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #3498db;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 2s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Chatbot Styling */
    .chat-container {
      height: 300px;
      overflow-y: auto;
      border: 1px solid #ccc;
      padding: 10px;
    
      border-radius: 5px;
    }
    #chatbotModal{z-index: 99999;}

    @media (min-width: 576px) {
    .modal-dialog {
        max-width: 850px!important;
    }
    }
  </style>
  
  <!-- Loader with spinner -->
  <div id="loader">
    <img src="/images/loader.gif">
        <!-- <div class="spinner"></div> -->
  </div>
  
<div class="card mb-4">
    <div class="card-header">
        <h3>Grievance Details</h3>
    </div>
    <div class="card-body">
        <p><strong>Grievance ID:</strong> <%= grievance.grievanceId %></p>
        <p><strong>Subject:</strong> <%= grievance.subject %></p>
        <p><strong>Submitted By:</strong> <%= grievance.submittedBy %> (<%= grievance.userId ? grievance.userId.email : 'N/A' %>)</p>
        <p><strong>Submitted For:</strong> <%= grievance.onBehalf ? grievance.onBehalf : 'For Self' %></p>
        <!-- <p><strong>User ID:</strong> <%= grievance.userId %></p> -->
        <p><strong>Contact Information:</strong> <%= grievance.contactInformation %></p>
        <p><strong>Description:</strong> <%= grievance.description %></p>
        <p><strong>Nature Of Grievance:</strong> <%= grievance.nature %></p>
        <p><strong>More Description:</strong> <%= grievance.more_description %></p>
        <p><strong>Assigned Department:</strong> <%= grievance.assignedDepartment %></p>
        <p><strong>Assigned To:</strong> <%= grievance.assignedTo %></p>
        <p><strong>Grievance date:</strong> 
            <%= grievance.createdAt ? new Date(grievance.createdAt).toLocaleDateString() : 'N/A' %>
        </p>
        <p><strong>Resolution Deadline:</strong> 
          <%= grievance.resolutionDeadline ? new Date(grievance.resolutionDeadline).toLocaleDateString() : 'N/A' %>
      </p>
        <!-- <p><strong>Proposed Resolution:</strong> <%= grievance.proposedResolution %></p> -->
        <p><strong>Attachments:</strong></p>
        <% if (grievance.attachments.length > 0) { %>
            <ul>
                <% grievance.attachments.forEach(attachment => { %>
                    <li><a href="<%= attachment %>" target="_blank">View Attachment</a></li>
                <% }) %>
            </ul>
        <% } else { %>
            <p>No attachments available</p>
        <% } %>
        
        <form id="grievanceStatusForm">
            <p><strong>Status:</strong></p>
            <select id="statusDropdown" class="form-select mb-3">
                <option value="Pending" <%= grievance.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                <option value="In Progress" <%= grievance.status === 'In Progress' ? 'selected' : '' %>>In Progress</option>
                <option value="Complete" <%= grievance.status === 'Complete' ? 'selected' : '' %>>Complete</option>
                <option value="Re Open" <%= grievance.status === 'Re Open' ? 'selected' : '' %>>Re Open</option>
            </select>
            <input type="hidden" name="priority" id="priority">
            <input type="hidden" name="sentiment" id="sentiment">
            <div class="form-group mb-3">
                <label for="feedback">Proposed Resolution</label>
                <textarea name="feedback" id="feedback" class="form-control" rows="4"><%= grievance.feedback ? grievance.feedback.trim() : '' %></textarea>
            </div>

            <!-- <div class="form-group mb-3"><div id="priorityLabel"></div></div>
            <div class="form-group mb-3"><div id="sentimentLabel"></div></div> -->
           <div class="row">
            <div class="form-group mb-3 col-md-6">
                <label>Priority:</label>
                <div id="priorityLabel" class="alert alert-info">
                  <%= grievance.priority || 'Priority will appear here' %>
                </div>
              </div>
            
              <div class="form-group mb-3 col-md-6">
                <label>Sentiment:</label>
                <div id="sentimentLabel" class="alert alert-info">
                  <%= grievance.sentiment || 'Sentiment will appear here' %>
                </div>
              </div>
           </div>
            
           <% if (grievance.status !== 'Complete') { %>
                <div class="col-md-3">
                    <button type="submit" class="btn btn-primary">PROCEED</button>
                </div>
            <% } %>
        
           
        </form>
    </div>
</div>


  <!-- if (grievanceFeedback.trim()) {
   return;  
  } -->
<div id="chatbotButton" style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;">
  <button id="openChatbot" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#chatbotModal">
    Get Resolution By Chatbot
  </button>
</div>



<!-- Chatbot Modal -->
<div class="modal fade" id="chatbotModal" tabindex="-1" aria-labelledby="chatbotModalLabel" aria-hidden="true"  data-bs-backdrop="static" data-bs-keyboard="false">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="chatbotModalLabel">LLAMA Bot</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body row">
        <!-- <div class="col-md-6">
          <h3>LLM Bot</h3>
          <div class="chat-container" id="chatHistory"></div>
        </div> -->
        <div class="col-md-12">
          <!-- <h3></h3> -->
          <div class="chat-container" id="chatHistory1"></div>
        </div>
       <div class="input-group mt-3">
          <!-- <input type="text" id="chatInput" class="form-control" placeholder="Type your message..."> -->
          <!-- <button id="sendChat" class="btn btn-primary">Send</button> -->
        </div>
      </div>
    </div>
  </div>
</div>

  <script>
$(document).ready(function () {
  $('#chatHistory,#chatHistory1').html('');
  const chatHistory1 = $('#chatHistory1'); // Chat history for send-query
  const chatHistory = $('#chatHistory'); // Chat history for analyze
  const loader = $('#loader');
    

    // Function to handle AJAX requests
    function handleApiRequest(url, data, chatHistoryElement, userMessage, isSendQuery) {
    userMessage='<%= grievance.description %>';
    const nature= '<%= grievance.nature %>';
    const moreDescription ='<%= grievance.moreDescription %>';
     // Add user message to the corresponding chat history
     chatHistoryElement.append(`<div><strong>Query:</strong> ${userMessage}</div>`);
     if(nature)
     chatHistoryElement.append(`<div><strong>Nature:</strong> ${nature}</div>`);
     if(moreDescription)
     chatHistoryElement.append(`<div><strong>moreDescription:</strong> ${moreDescription}</div>`);

    data.lang = '<%= adminLanguage %>';
    // Show loader
    loader.show();

    // Make AJAX request
    $.ajax({
      url: url,
      method: 'POST',
      contentType: 'application/json',
      data: JSON.stringify(data),
      success: function (response) {
      loader.hide();
      const resData = isSendQuery ? response.data : response.data.data;
      const { answer, priority, sentiment, answer_detected_language } = resData;

      let botResponseHTML = `
        <div>
          <strong>Bot:</strong><br>
          <strong></strong> <span class="typing-response-correct"></span><br>
          <button class="btn btn-sm btn-primary mt-2 setAsFeedback" 
                  data-answer="${answer}" 
                  >
            Set as Resolution
          </button><br><br>
      `;

      if (answer_detected_language && answer !=answer_detected_language) {
        botResponseHTML += `
          <strong></strong> <span class="typing-response-detected"></span><br>
          <button class="btn btn-sm btn-secondary mt-2 setAsFeedback" 
                  data-answer="${answer_detected_language}"">
            Set as Resolution
          </button><br><br>
        `;
      }
      botResponseHTML += `
          
        </div>
      `;
      // <button class="btn btn-sm btn-success mt-2 copyResponse">Copy</button>
      // Create a jQuery object and append it to the chat history
      const botResponseContainer = $(botResponseHTML);
      chatHistoryElement.append(botResponseContainer);

      // Simulate typing effect for both answers
      typeText(botResponseContainer.find('.typing-response-correct'), answer);
      typeText(botResponseContainer.find('.typing-response-detected'), answer_detected_language);

      // Scroll to the bottom of chat history
      chatHistoryElement.scrollTop(chatHistoryElement[0].scrollHeight);
    },
      error: function (xhr, status, error) {
        loader.hide();
        chatHistoryElement.append(`<div><strong>Bot:</strong> Sorry, something went wrong.</div>`);
        console.error('Error:', status, error);
      },
    });
  }

  // Combined API handler for both APIs
  $('#openChatbot').on('click', function () {
    $('#chatHistory,#chatHistory1').html('');
    
     const grievance = <%- JSON.stringify(grievance) %>;

    const userMessage = `${grievance.description || ''}\n${grievance.nature || ''}\n${grievance.more_description || ''}`.trim();

    const requestData = { userQuery: userMessage, text: userMessage };

    // Call both APIs and show results in respective chat histories
    handleApiRequest('/admin/send-query', { userQuery: requestData.userQuery }, chatHistory1, userMessage, true);
    //handleApiRequest('/admin/analyze', { text: requestData.text }, chatHistory, userMessage, false);
  });

  // Typing Effect Function
  function typeText(element, text) {
    let index = 0;
    const typingSpeed = 50; // Milliseconds per character

    function typeNextChar() {
      if (index < text.length) {
        element.append(text.charAt(index)); // Append the next character
        index++;
        setTimeout(typeNextChar, typingSpeed); // Call the function recursively
      }
    }

    typeNextChar(); // Start typing
  }

  // Handle Copy Button Click
  $(document).on('click', '.copyResponse', function () {
    const responseText = $(this).closest('div').text().trim();
    navigator.clipboard
      .writeText(responseText)
      .then(() => {
        alert('Response copied to clipboard!');
      })
      .catch((err) => {
        console.error('Failed to copy response:', err);
      });
  });

  // Handle Set as Feedback Button Click
  $(document).on('click', '.setAsFeedback', function () {
    const answer = $(this).data('answer');
    const priority = $(this).data('priority');
    const sentiment = $(this).data('sentiment');

    // Set feedback, priority, and sentiment
    $('#feedback').val(answer);
    $('#chatbotModal').modal('hide');

    alert('Resolution have been updated!');
  });
});


  </script>


<script>
    document.getElementById('grievanceStatusForm').addEventListener('submit', (e) => {
        e.preventDefault();

        const status = document.getElementById('statusDropdown').value;
        const feedback = document.getElementById('feedback').value;
        const priority = document.getElementById('priority').value;
        const sentiment = document.getElementById('sentiment').value;
        const grievanceId = "<%= grievance._id %>";

        // Send both status and feedback
        fetch(`/admin/grievance_status/${grievanceId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status, feedback, priority, sentiment }),
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Status and feedback updated successfully.');
                    window.location.href = data.redirectUrl;
                } else {
                    alert('Failed to update status: ' + data.error);
                }
            })
            .catch(err => {
                console.error('Error:', err);
                alert('An unexpected error occurred.');
            });
    });
</script>
