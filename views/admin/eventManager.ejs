<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Manager</title>
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        .filters {
            margin-bottom: 20px;
        }
        .filters select {
            padding: 5px;
            margin-right: 10px;
        }
        .static-data {
            margin-top: 5px;
            font-size: 0.85em;
            display: flex;
            flex-direction: column; /* Align items vertically */
            align-items: center;
        }
        .static-data .badge {
            font-size: 0.75em; /* Smaller badges */
            margin-bottom: 2px; /* Space between badges */
        }
        .fc-daygrid-day-top {
            position: relative;
        }
        .fc-daygrid-day-frame {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
    </style>
</head>
<body>
    <div class="container my-4">
        <h1 class="text-center text-primary">Calendar Manager</h1>

        <!-- Filter Section -->
        <!-- <div class="filters text-center mb-4">
            <label for="eventCategory" class="form-label">Filter by Category:</label>
            <select id="eventCategory" class="form-select d-inline-block w-auto">
                <option value="">All Categories</option>
                <option value="workOrder">Work Order</option>
                <option value="moveIn">Move In</option>
                <option value="reminder">Reminder</option>
                <option value="note">Note</option>
            </select>
        </div> -->

        <!-- Calendar Section -->
        <div id="calendar"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const calendarEl = document.getElementById('calendar');

            // Static data for grievances
            const staticData = {
                "2025-01-19": { total: 10, complete: 5 },
                "2025-01-20": { total: 8, complete: 3 },
                "2025-01-21": { total: 15, complete: 10 },
                "2025-01-22": { total: 12, complete: 7 },
                "2025-01-23": { total: 9, complete: 6 },
                "2025-01-24": { total: 7, complete: 4 },
                "2025-01-25": { total: 11, complete: 8 },
                "2025-01-27": { total: 10, complete: 5 },
                "2025-01-28": { total: 8, complete: 3 },
                "2025-01-29": { total: 15, complete: 10 },
            };

            const calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth', // Default view
                views: {
                    dayGridMonth: { buttonText: 'Month' },
                    timeGridWeek: { buttonText: 'Week' },
                    timeGridDay: { buttonText: 'Day' }
                },
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                events: '/events/events', // Fetch events from the route

                // Add static data to day cells
                dayCellDidMount: function (info) {
                    const dateStr = info.date.toISOString().split('T')[0]; // Format: YYYY-MM-DD
                    if (staticData[dateStr]) {
                        const { total, complete } = staticData[dateStr];

                        // Create a container for static data
                        const staticDataContainer = document.createElement('div');
                        staticDataContainer.classList.add('static-data');

                        // Add badges with highlighted colors
                        staticDataContainer.innerHTML = `
                            <span class="badge bg-primary">Total Grievences: ${total}</span>
                            <span class="badge bg-success">Complete Grievences: ${complete}</span>
                        `;

                        // Append static data to the calendar day cell
                        const dayCellFrame = info.el.querySelector('.fc-daygrid-day-frame');
                        if (dayCellFrame) {
                            dayCellFrame.appendChild(staticDataContainer);
                        }
                    }
                },

                // Add Event
                selectable: true,
                editable: true,
                // select: async function (info) {
                //     const title = prompt('Enter Event Title');
                //     const type = prompt('Enter Event Type (e.g. workOrder, moveIn, reminder, note)');
                //     if (title && type) {
                //         const newEvent = {
                //             title,
                //             start: info.startStr,
                //             end: info.endStr,
                //             type,
                //             allDay: info.allDay,
                //         };

                //         const res = await fetch('/events/events', {
                //             method: 'POST',
                //             headers: { 'Content-Type': 'application/json' },
                //             body: JSON.stringify(newEvent),
                //         });
                //         if (res.ok) {
                //             calendar.addEvent(await res.json());
                //         }
                //     }
                //     calendar.unselect();
                // },

                // Delete Event
                // eventClick: async function (info) {
                //     if (confirm(`Do you want to delete the event: "${info.event.title}"?`)) {
                //         const res = await fetch(`/events/events/${info.event.extendedProps._id}`, {
                //             method: 'DELETE',
                //         });
                //         if (res.ok) {
                //             info.event.remove();
                //         }
                //     }
                // },
            });

            calendar.render();

            // Event Filter Handling
            const categoryFilter = document.getElementById('eventCategory');
            categoryFilter.addEventListener('change', function () {
                const selectedCategory = categoryFilter.value;

                // Refetch events based on selected filter
                const eventsUrl = selectedCategory ? `/events/events?category=${selectedCategory}` : '/events/events';
                calendar.removeAllEvents(); // Clear previous events
                calendar.addEventSource(eventsUrl); // Fetch and add events based on selected category
            });
        });
    </script>
</body>
</html>
